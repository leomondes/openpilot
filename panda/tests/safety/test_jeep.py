#!/usr/bin/env python3
import unittest
from panda import Panda
from panda.tests.libpanda import libpanda_py
import panda.tests.safety.common as common
from panda.tests.safety.common import CANPackerPanda

def crc8_sae_j1850(data):
    crc8_table = [
        0x00, 0x1D, 0x3A, 0x27, 0x74, 0x69, 0x4E, 0x53, 0xE8, 0xF5, 0xD2, 0xCF, 0x9C, 0x81, 0xA6, 0xBB,
        0xCD, 0xD0, 0xF7, 0xEA, 0xB9, 0xA4, 0x83, 0x9E, 0x25, 0x38, 0x1F, 0x02, 0x51, 0x4C, 0x6B, 0x76,
        0x87, 0x9A, 0xBD, 0xA0, 0xF3, 0xEE, 0xC9, 0xD4, 0x6F, 0x72, 0x55, 0x48, 0x1B, 0x06, 0x21, 0x3C,
        0x4A, 0x57, 0x70, 0x6D, 0x3E, 0x23, 0x04, 0x19, 0xA2, 0xBF, 0x98, 0x85, 0xD6, 0xCB, 0xEC, 0xF1,
        0x13, 0x0E, 0x29, 0x34, 0x67, 0x7A, 0x5D, 0x40, 0xFB, 0xE6, 0xC1, 0xDC, 0x8F, 0x92, 0xB5, 0xA8,
        0xDE, 0xC3, 0xE4, 0xF9, 0xAA, 0xB7, 0x90, 0x8D, 0x36, 0x2B, 0x0C, 0x11, 0x42, 0x5F, 0x78, 0x65,
        0x94, 0x89, 0xAE, 0xB3, 0xE0, 0xFD, 0xDA, 0xC7, 0x7C, 0x61, 0x46, 0x5B, 0x08, 0x15, 0x32, 0x2F,
        0x59, 0x44, 0x63, 0x7E, 0x2D, 0x30, 0x17, 0x0A, 0xB1, 0xAC, 0x8B, 0x96, 0xC5, 0xD8, 0xFF, 0xE2,
        0x26, 0x3B, 0x1C, 0x01, 0x52, 0x4F, 0x68, 0x75, 0xCE, 0xD3, 0xF4, 0xE9, 0xBA, 0xA7, 0x80, 0x9D,
        0xEB, 0xF6, 0xD1, 0xCC, 0x9F, 0x82, 0xA5, 0xB8, 0x03, 0x1E, 0x39, 0x24, 0x77, 0x6A, 0x4D, 0x50,
        0xA1, 0xBC, 0x9B, 0x86, 0xD5, 0xC8, 0xEF, 0xF2, 0x49, 0x54, 0x73, 0x6E, 0x3D, 0x20, 0x07, 0x1A,
        0x6C, 0x71, 0x56, 0x4B, 0x18, 0x05, 0x22, 0x3F, 0x84, 0x99, 0xBE, 0xA3, 0xF0, 0xED, 0xCA, 0xD7,
        0x35, 0x28, 0x0F, 0x12, 0x41, 0x5C, 0x7B, 0x66, 0xDD, 0xC0, 0xE7, 0xFA, 0xA9, 0xB4, 0x93, 0x8E,
        0xF8, 0xE5, 0xC2, 0xDF, 0x8C, 0x91, 0xB6, 0xAB, 0x10, 0x0D, 0x2A, 0x37, 0x64, 0x79, 0x5E, 0x43,
        0xB2, 0xAF, 0x88, 0x95, 0xC6, 0xDB, 0xFC, 0xE1, 0x5A, 0x47, 0x60, 0x7D, 0x2E, 0x33, 0x14, 0x09,
        0x7F, 0x62, 0x45, 0x58, 0x0B, 0x16, 0x31, 0x2C, 0x97, 0x8A, 0xAD, 0xB0, 0xE3, 0xFE, 0xD9, 0xC4
    ]
    crc = 0xFF
    for byte in data:
        crc = crc8_table[crc ^ byte]
    crc ^= 0xFF
    return crc

def checksum(msg):
  addr, dat, bus = msg
  chksum = crc8_sae_j1850(dat)
  ret = chksum
  return addr, ret, bus

class TestJeepSafety(common.PandaCarSafetyTest, common.DriverTorqueSteeringSafetyTest):
  TX_MSGS = [[0x1F6, 0], [0x547, 0], [0x5A2, 0]]
  STANDSTILL_THRESHOLD = 0
  RELAY_MALFUNCTION_ADDRS = {0: [0x1F6,0x547,0x5A2]}
  FWD_BLACKLISTED_ADDRS = {2: [0x1F6,0x547,0x5A2]}
  FWD_BUS_LOOKUP = {0: 2, 2: 0}

  MAX_RATE_UP = 2
  MAX_RATE_DOWN = 2
  MAX_TORQUE = 300
  MAX_RT_DELTA = 150
  RT_INTERVAL = 250000
  MAX_TORQUE_ERROR = 80

  DRIVER_TORQUE_ALLOWANCE = 80
  DRIVER_TORQUE_FACTOR = 2

  def setUp(self):
    self.packer = CANPackerPanda("renegade")
    self.safety = libpanda_py.libpanda
    self.safety.set_safety_hooks(Panda.SAFETY_JEEP, 0)
    self.safety.init_tests()

  #def _button_msg(self, cancel=False, resume=False):
  #  pass

  def _pcm_status_msg(self, enable):
    values = {"ACC_ACTIVE": 7 if enable else 0}
    return self.packer.make_can_msg_panda("ACC_2", 1, values)

  def _speed_msg(self, speed):
    values = {"WHEEL_SPEED_%s" % s: speed for s in ["FL", "FR", "RL", "RR"]}
    return self.packer.make_can_msg_panda("ABS_1", 0, values, fix_checksum=checksum)

  def _speed_msg_2(self, speed):
    values = {"VEHICLE_SPEED": speed}
    return self.packer.make_can_msg_panda("ABS_6", 0, values, fix_checksum=checksum)

  def _user_brake_msg(self, brake=1):
    values = {"BRAKE_PEDAL_SWITCH": brake}
    return self.packer.make_can_msg_panda("ABS_3", 0, values, fix_checksum=checksum)

  def _user_gas_msg(self, gas_pressed=1):
    values = {"ACCEL_PEDAL_FOOT": 1 if gas_pressed > 0 else 0}
    return self.packer.make_can_msg_panda("ENGINE_2", 0, values)

  def _torque_driver_msg(self, driver_torque):
    values = {"EPS_TORQUE": driver_torque}
    return self.packer.make_can_msg_panda("EPS_2", 0, values, fix_checksum=checksum)

  def _torque_meas_msg(self, torque):
    values = {"EPS_TORQUE": torque}
    return self.packer.make_can_msg_panda("EPS_2", 0, values, fix_checksum=checksum)

  def _torque_cmd_msg(self, apply_torque, steer_req=1):
    values = {"LKA_TORQUE": apply_torque, "LKA_ENABLED": 1 if steer_req else 0}
    return self.packer.make_can_msg_panda("LKA_COMMAND", 0, values, fix_checksum=checksum)

  def test_rx_hook(self):
    for count in range(20):
      self.assertTrue(self._rx(self._speed_msg(0)), f"{count=}")
      self.assertTrue(self._rx(self._user_brake_msg(True)), f"{count=}")
      self.assertTrue(self._rx(self._user_gas_msg(True)), f"{count=}")
      self.assertTrue(self._rx(self._torque_meas_msg(0)), f"{count=}")
      self.assertTrue(self._rx(self._pcm_status_msg(False)), f"{count=}")
  
if __name__ == "__main__":
  unittest.main()
